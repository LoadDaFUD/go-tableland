// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: evm_events.sql

package db

import (
	"context"
)

const areEVMEventsPersisted = `-- name: AreEVMEventsPersisted :one
SELECT 1 FROM system_evm_events where chain_id=?1 and tx_hash=?2 LIMIT 1
`

type AreEVMEventsPersistedParams struct {
	ChainID int64
	TxHash  string
}

func (q *Queries) AreEVMEventsPersisted(ctx context.Context, arg AreEVMEventsPersistedParams) (interface{}, error) {
	row := q.queryRow(ctx, q.areEVMEventsPersistedStmt, areEVMEventsPersisted, arg.ChainID, arg.TxHash)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const getBlockExtraInfo = `-- name: GetBlockExtraInfo :one
SELECT chain_id, block_number, timestamp FROM system_evm_blocks WHERE chain_id=?1 and block_number=?2
`

type GetBlockExtraInfoParams struct {
	ChainID     int64
	BlockNumber int64
}

func (q *Queries) GetBlockExtraInfo(ctx context.Context, arg GetBlockExtraInfoParams) (SystemEvmBlock, error) {
	row := q.queryRow(ctx, q.getBlockExtraInfoStmt, getBlockExtraInfo, arg.ChainID, arg.BlockNumber)
	var i SystemEvmBlock
	err := row.Scan(&i.ChainID, &i.BlockNumber, &i.Timestamp)
	return i, err
}

const getBlocksMissingExtraInfo = `-- name: GetBlocksMissingExtraInfo :many
SELECT DISTINCT e.block_number
FROM system_evm_events e 
WHERE e.chain_id=?1 AND NOT EXISTS(select * from system_evm_blocks b WHERE e.chain_id=b.chain_id AND e.block_number=b.block_number)
ORDER BY e.block_number
`

func (q *Queries) GetBlocksMissingExtraInfo(ctx context.Context, chainID int64) ([]int64, error) {
	rows, err := q.query(ctx, q.getBlocksMissingExtraInfoStmt, getBlocksMissingExtraInfo, chainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var block_number int64
		if err := rows.Scan(&block_number); err != nil {
			return nil, err
		}
		items = append(items, block_number)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlocksMissingExtraInfoByBlockNumber = `-- name: GetBlocksMissingExtraInfoByBlockNumber :many
SELECT DISTINCT e.block_number
FROM system_evm_events e 
WHERE e.chain_id=?1 AND e.block_number>?2 AND
NOT EXISTS(select* from system_evm_blocks b WHERE e.chain_id=b.chain_id AND e.block_number=b.block_number)
ORDER BY e.block_number
`

type GetBlocksMissingExtraInfoByBlockNumberParams struct {
	ChainID     int64
	BlockNumber int64
}

func (q *Queries) GetBlocksMissingExtraInfoByBlockNumber(ctx context.Context, arg GetBlocksMissingExtraInfoByBlockNumberParams) ([]int64, error) {
	rows, err := q.query(ctx, q.getBlocksMissingExtraInfoByBlockNumberStmt, getBlocksMissingExtraInfoByBlockNumber, arg.ChainID, arg.BlockNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var block_number int64
		if err := rows.Scan(&block_number); err != nil {
			return nil, err
		}
		items = append(items, block_number)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEVMEvents = `-- name: GetEVMEvents :many
SELECT chain_id, event_json, event_type, address, topics, data, block_number, tx_hash, tx_index, block_hash, event_index FROM system_evm_events WHERE chain_id=?1 AND tx_hash=?2
`

type GetEVMEventsParams struct {
	ChainID int64
	TxHash  string
}

func (q *Queries) GetEVMEvents(ctx context.Context, arg GetEVMEventsParams) ([]SystemEvmEvent, error) {
	rows, err := q.query(ctx, q.getEVMEventsStmt, getEVMEvents, arg.ChainID, arg.TxHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemEvmEvent
	for rows.Next() {
		var i SystemEvmEvent
		if err := rows.Scan(
			&i.ChainID,
			&i.EventJson,
			&i.EventType,
			&i.Address,
			&i.Topics,
			&i.Data,
			&i.BlockNumber,
			&i.TxHash,
			&i.TxIndex,
			&i.BlockHash,
			&i.EventIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBlockExtraInfo = `-- name: InsertBlockExtraInfo :exec
INSERT INTO system_evm_blocks (chain_id, block_number, timestamp) VALUES (?1, ?2, ?3)
`

type InsertBlockExtraInfoParams struct {
	ChainID     int64
	BlockNumber int64
	Timestamp   int64
}

func (q *Queries) InsertBlockExtraInfo(ctx context.Context, arg InsertBlockExtraInfoParams) error {
	_, err := q.exec(ctx, q.insertBlockExtraInfoStmt, insertBlockExtraInfo, arg.ChainID, arg.BlockNumber, arg.Timestamp)
	return err
}

const insertEVMEvent = `-- name: InsertEVMEvent :exec
INSERT INTO system_evm_events (chain_id, event_json, event_type, address, topics, data, block_number, tx_hash, tx_index, block_hash, event_index)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11)
`

type InsertEVMEventParams struct {
	ChainID     int64
	EventJson   string
	EventType   string
	Address     string
	Topics      string
	Data        []byte
	BlockNumber int64
	TxHash      string
	TxIndex     uint
	BlockHash   string
	EventIndex  uint
}

func (q *Queries) InsertEVMEvent(ctx context.Context, arg InsertEVMEventParams) error {
	_, err := q.exec(ctx, q.insertEVMEventStmt, insertEVMEvent,
		arg.ChainID,
		arg.EventJson,
		arg.EventType,
		arg.Address,
		arg.Topics,
		arg.Data,
		arg.BlockNumber,
		arg.TxHash,
		arg.TxIndex,
		arg.BlockHash,
		arg.EventIndex,
	)
	return err
}
