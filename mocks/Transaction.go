// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

type Transaction_Expecter struct {
	mock *mock.Mock
}

func (_m *Transaction) EXPECT() *Transaction_Expecter {
	return &Transaction_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields:
func (_m *Transaction) Hash() common.Hash {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// Transaction_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type Transaction_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
func (_e *Transaction_Expecter) Hash() *Transaction_Hash_Call {
	return &Transaction_Hash_Call{Call: _e.mock.On("Hash")}
}

func (_c *Transaction_Hash_Call) Run(run func()) *Transaction_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Transaction_Hash_Call) Return(_a0 common.Hash) *Transaction_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTransaction interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransaction(t mockConstructorTestingTNewTransaction) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
